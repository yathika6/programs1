#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

typedef struct {
    int pno;       
    int btime;     
    int sbtime;    
    int wtime;     
    int lst;       
} rr;

int main() {
    rr p[MAX_PROCESSES];
    int ts;         
    int i, n, count;
    int ptm = 0;   
    int flag;     
    int totwtime = 0;  
    int tottime = 0;   

    printf("\nRound Robin Scheduling\n");
    printf("Enter number of processes: ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX_PROCESSES) {
        printf("Number of processes must be between 1 and %d\n", MAX_PROCESSES);
        return 1;
    }

    printf("Enter the time slice: ");
    scanf("%d", &ts);

    printf("Enter the burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &p[i].btime);
        p[i].sbtime = p[i].btime;  
        p[i].wtime = 0;
        p[i].lst = 0;
        p[i].pno = i + 1;
    }

    printf("\nScheduling:\n");

    do {
        flag = 1;  
        for (i = 0; i < n; i++) {
            if (p[i].sbtime > 0) {
                flag = 0;  // At least one process is left
                count = (p[i].sbtime >= ts) ? ts : p[i].sbtime;
                printf("\nProcess %d", p[i].pno);
                printf(" from %d", ptm);
                ptm += count;
                printf(" to %d", ptm);
                p[i].sbtime -= count;
                if (p[i].sbtime > 0) {
                    p[i].wtime += ptm - p[i].lst - count;
                } else {
                    p[i].wtime += ptm - p[i].lst;
                }
                p[i].lst = ptm;
            }
        }
    } while (!flag);

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        int turnaround_time = p[i].wtime + p[i].btime;
        totwtime += p[i].wtime;
        tottime += turnaround_time;
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].pno, p[i].btime, p[i].wtime, turnaround_time);
    }

    printf("\nTotal waiting time: %d", totwtime);
    printf("\nAverage waiting time: %.2f", (float)totwtime / n);
    printf("\nTotal turnaround time: %d", tottime);
    printf("\nAverage turnaround time: %.2f\n", (float)tottime / n);

    return 0;
}

output:

Round Robin Scheduling
Enter number of processes: 3
Enter the time slice: 4
Enter the burst time for each process:
Process 1: 10
Process 2: 5
Process 3: 8

Scheduling:

Process 1 from 0 to 4
Process 2 from 4 to 8
Process 3 from 8 to 12
Process 1 from 12 to 16
Process 2 from 16 to 17
Process 3 from 17 to 21
Process 1 from 21 to 23
Process	Burst Time	Waiting Time	Turnaround Time
1	10		15		25
2	5		13		18
3	8		17		25

Total waiting time: 45
Average waiting time: 15.00
Total turnaround time: 68
Average turnaround time: 22.67
