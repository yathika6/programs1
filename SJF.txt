#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;   
    int btime; 
    int wtime; 
} sp;

int main() {
    int i, j, n;
    int tbm = 0, totwtime = 0, tottime;
    sp *p, t;

    printf("\nSJF Scheduling\n");
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    p = (sp*)malloc(n * sizeof(sp));
    if (p == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    printf("Enter the burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &p[i].btime);
        p[i].pid = i + 1;
        p[i].wtime = 0;
    }

    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (p[i].btime > p[j].btime) {
                t = p[i];
                p[i] = p[j];
                p[j] = t;
            }
        }
    }

    printf("\nProcess Scheduling\n");
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (i = 0; i < n; i++) {
        p[i].wtime = tbm;
        tbm += p[i].btime;
        totwtime += p[i].wtime;
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].btime, p[i].wtime, p[i].wtime + p[i].btime);
    }

    tottime = tbm + totwtime;
    printf("\nTotal Waiting Time: %d", totwtime);
    printf("\nAverage Waiting Time: %.2f", (float)totwtime / n);
    printf("\nTotal Turnaround Time: %d", tottime);
    printf("\nAverage Turnaround Time: %.2f\n", (float)tottime / n);

    // Free allocated memory
    free(p);

    return 0;
}

output:

SJF Scheduling
Enter the number of processes: 4
Enter the burst time for each process:
Process 1: 6
Process 2: 8
Process 3: 7
Process 4: 3

Process Scheduling
Process	Burst Time	Waiting Time	Turnaround Time
4	3		0		3
1	6		3		9
3	7		9		16
2	8		16		24

Total Waiting Time: 28
Average Waiting Time: 7.00
Total Turnaround Time: 52
Average Turnaround Time: 13.00
