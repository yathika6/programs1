3a. Program for simulation of cp unix commands
#include<stdio.h>
#include<stdlib.h>
#define BUFFER_SIZE 1024
int main(int argc, char *argv[])
{
FILE *srcFile, *destFile;
char buffer[BUFFER_SIZE];
size_t bytesRead;

if (argc != 3) {
fprintf(stderr, "Usage: %s <source_file&gt><destination_file>\n", argv[0]);
return 1;
}

srcFile = fopen(argv[1], "rb");
if (srcFile == NULL) {
perror("Error opening source file");
return 1;
}

destFile = fopen(argv[2], "wb");
if (destFile == NULL) {
perror("Error opening destination file");
fclose(srcFile);
return 1;
}

while ((bytesRead = fread(buffer, 1, BUFFER_SIZE, srcFile)) >0) {
if (fwrite(buffer, 1, bytesRead, destFile) != bytesRead) {
perror("Error writing to destination file");
fclose(srcFile);
fclose(destFile);
return 1;
}
}
if (ferror(srcFile)) {
perror("Error reading from source file");
}
fclose(srcFile);
fclose(destFile);
printf("File copied successfully from '%s' to '%s'.\n", argv[1], argv[2]);
return 0;
}

output:
1. create one sample file in text editor and add content to it
2. Compile :gcc -o cp_cp1 cp1.c
student@cmruuser:~$ ./cp_cp1 sample.txt 3a.c
//where cp1 is the program file, sample.txt is the source file and 3a.c is the destination file
output:File copied successfully from &#39;sample.txt&#39; to &#39;3a.c&#39;.


3b. PROGRAM FOR SIMULATION OF LS UNIX COMMANDS
#include<stdio.h>
#include<dirent.h>
int main(int argc, char **argv)
{
DIR *dp;
struct dirent *entry;
if (argc<2) {
fprintf(stderr, "Usage: %s &lt;directory>\n", argv[0]);
return 1;
}
dp = opendir(argv[1]);
if (dp == NULL) {
perror("opendir");
return 1;
}
printf("\nContents of the directory %s are:\n", argv[1]);
while ((entry = readdir(dp)) != NULL) {
printf("%s\n", entry->d_name);
}
closedir(dp);
return 0;
}

Output:
student@cmruuser:~$ gcc ls1.c
student@cmruuser:~$ ./a.out sachin

Contents of the directory sachin are:
list.c
..
.



3c. PROGRAM FOR SIMULATION OF GREP UNIX COMMANDS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define MAX 1024
void usage() {
printf("Usage: ./a.out filename word\n");
}
int main(int argc, char *argv[]) {
FILE *fp;
char fline[MAX];
char *newline;
int count = 0;
int occurrences = 0;
if (argc != 3) {
usage();
exit(1);

}
if (!(fp = fopen(argv[1], "r"))) {
printf("grep: could not open file: %s\n", argv[1]);
exit(1);
}
while (fgets(fline, MAX, fp) != NULL) {
count++;
if ((newline = strchr(fline, '\n')) != NULL) {
*newline = '\0';
}
if (strstr(fline, argv[2]) != NULL) {
printf("%s: %d %s\n", argv[1], count, fline);
occurrences++;
}
}
fclose(fp);
if (occurrences == 0) {
printf("No occurrences found for '%s' in %s\n", argv[2], argv[1]);
}
return 0;
}

output:
student@cmruuser:~$ gcc grep.c
student@cmruuser:~$ ./a.out sample.txt welcome
sample.txt: 1 Hi welcome
sample.txt: 2 welcome